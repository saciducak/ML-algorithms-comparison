# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WeuSK0tbrR0N-KJMlYdh242ttkz9SgTj
"""

# UCI Machine Learning Repository'den veri setleri indirmek fetch_openml fonksiyonu ve sklearn.datasets modülünü kullandık.
from sklearn.datasets import fetch_openml

# Uygun veri setlerini seçme ve yükleme
iris = fetch_openml(name='iris', version=1)
breast_cancer = fetch_openml(name='breast-cancer', version=1)
diabetes = fetch_openml(name='diabetes', version=1)
vehicle = fetch_openml(name='vehicle', version=1)
ionosphere = fetch_openml(name='ionosphere', version=1)
glass = fetch_openml(name='glass', version=1)
segment = fetch_openml(name='segment', version=1)
wine_quality = fetch_openml(name='wine-quality-red', version=1)
yeast = fetch_openml(name='yeast', version=1)
ecoli = fetch_openml(name='ecoli', version=1)

# Seçilen veri setlerini bir sözlükte saklama
selected_datasets = {
    'Iris': iris,
    'Breast Cancer': breast_cancer,
    'Diabetes': diabetes,
    'Vehicle': vehicle,
    'Ionosphere': ionosphere,
    'Glass': glass,
    'Segment': segment,
    'Wine Quality': wine_quality,
    'Yeast': yeast,
    'Ecoli': ecoli,
}

from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd

from sklearn.naive_bayes import GaussianNB               # yeni eklendi yeni ML algoritmamız.
from sklearn.ensemble import GradientBoostingClassifier  # yeni eklendi yeni ML algoritmamız.

# Algoritmaları tanımlayalım
classifiers = {
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC(),
    'KNN': KNeighborsClassifier(),
    # Ekstra algoritmayı ekleyin
    'Gradient Boosting': GradientBoostingClassifier(),
    'Naive Bayes': GaussianNB()
}

# Doğruluk skorlarını saklamak için boş bir sözlük oluşturalım
accuracy_scores = {classifier: [] for classifier in classifiers}

# Her bir veri seti üzerinde algoritmaları uygulayalım
for dataset_name, dataset in selected_datasets.items():
    X, y = dataset.data, dataset.target
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Kategorik değişkenleri sayısal değerlere dönüştürme
    X_train = pd.get_dummies(pd.DataFrame(X_train))
    X_test = pd.get_dummies(pd.DataFrame(X_test))

    for classifier_name, classifier in classifiers.items():
        classifier.fit(X_train, y_train)  # Algoritmayı eğit
        y_pred = classifier.predict(X_test)  # Test veri seti üzerinde tahmin yap
        accuracy = accuracy_score(y_test, y_pred)  # Doğruluk skorunu hesapla

        # Doğruluk skorlarını sakla
        accuracy_scores[classifier_name].append(accuracy)

# Doğruluk skorlarının ortalamasını ve standart sapmasını hesaplayalım
accuracy_means = {classifier: np.mean(scores) for classifier, scores in accuracy_scores.items()}
accuracy_stds = {classifier: np.std(scores) for classifier, scores in accuracy_scores.items()}

# Elde edilen sonuçları yazdıralım
for classifier, mean_accuracy in accuracy_means.items():
    print(f"{classifier}: Mean Accuracy: {mean_accuracy:.2f}, Standard Deviation: {accuracy_stds[classifier]:.2f}")

from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd
import time

from sklearn.naive_bayes import GaussianNB               # yeni eklendi yeni ML algoritmamız.
from sklearn.ensemble import GradientBoostingClassifier  # yeni eklendi yeni ML algoritmamız.

# Algoritmaları tanımlayalım
classifiers = {
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC(),
    'KNN': KNeighborsClassifier(),
    # Ekstra algoritmayı ekleyin
    'Gradient Boosting': GradientBoostingClassifier(),
    'Naive Bayes': GaussianNB()
}

# Eğitim sürelerini saklamak için boş bir sözlük oluşturalım
training_times = {classifier: [] for classifier in classifiers}

# Her bir veri seti üzerinde algoritmaları uygulayalım
for dataset_name, dataset in selected_datasets.items():
    X, y = dataset.data, dataset.target
    X_train, _, y_train, _ = train_test_split(X, y, test_size=0.2, random_state=42)

    # Kategorik değişkenleri sayısal değerlere dönüştürme
    X_train = pd.get_dummies(pd.DataFrame(X_train))

    for classifier_name, classifier in classifiers.items():
        start_time = time.time()  # Eğitim süresini başlat
        classifier.fit(X_train, y_train)  # Algoritmayı eğit
        end_time = time.time()  # Eğitim süresini bitir
        training_time = end_time - start_time  # Eğitim süresini hesapla

        # Eğitim sürelerini sakla
        training_times[classifier_name].append(training_time)

# Eğitim sürelerini yazdıralım
for classifier, times in training_times.items():
    print(f"{classifier}: Mean Training Time: {np.mean(times):.2f} seconds")

import matplotlib.pyplot as plt

# Eğitim sürelerini görselleştirme
plt.figure(figsize=(10, 6))
for classifier_name, times in training_times.items():
    plt.plot(range(1, len(times) + 1), times, marker='o', label=classifier_name)

plt.title('Eğitim Sürelerinin Karşılaştırılması')
plt.xlabel('Veri Seti Numarası')
plt.ylabel('Eğitim Süresi (s)')
plt.xticks(range(1, len(training_times) + 1))
plt.legend()
plt.grid(True)
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Confusion matrix oluşturmak için bir fonksiyon tanımlayalım
def plot_confusion_matrix(y_true, y_pred, class_names, title):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=class_names, yticklabels=class_names)
    plt.xlabel('Tahmin Edilen Sınıf')
    plt.ylabel('Gerçek Sınıf')
    plt.title(title)
    plt.show()

# Her bir algoritmanın confusion matrix'ini oluşturup görselleştirelim
for classifier_name, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    plot_confusion_matrix(y_test, y_pred, class_names=dataset.target_names, title=f'{classifier_name} Confusion Matrix')
